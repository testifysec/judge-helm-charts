{{- if .Values.configmap.create }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kratos.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kratos.labels" . | nindent 4 }}
  annotations:
    {{- with .Values.configmap.annotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
data:
  {{- with .Values.kratos.config }}
  kratos.yaml: |
    {{- include "kratos.configmap" $ | nindent 4 }}
  {{- end }}
  # OIDC provider mapper files
  github.jsonnet: |
    local claims = {
      email_verified: false
    } + std.extVar('claims');

    {
      identity: {
        traits: {
          // Allowing unverified email addresses enables account
          // enumeration attacks, especially if the value is used for
          // e.g. verification or as a password login identifier.
          //
          // Therefore we only return the email if it (a) exists and (b) is marked verified
          // by GitHub.
          [if "email" in claims && claims.email_verified then "email" else null]: claims.email,
          [if "name" in claims then "name" else null]: claims.name,
        },
        metadata_public: {
          assigned_tenants: []
        }
      },
    }
  gitlab.jsonnet: |
    local claims = {
      email_verified: false
    } + std.extVar('claims');

    {
      identity: {
        traits: {
          // Allowing unverified email addresses enables account
          // enumeration attacks, especially if the value is used for
          // e.g. verification or as a password login identifier.
          //
          // Therefore we only return the email if it (a) exists and (b) is marked verified
          // by GitLab.
          [if "email" in claims && claims.email_verified then "email" else null]: claims.email,
          [if "name" in claims then "name" else null]: claims.name,
        },
        metadata_public: {
          assigned_tenants: []
        }
      },
    }
{{- end }}