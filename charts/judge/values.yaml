# Global configuration - SINGLE SOURCE OF TRUTH
global:
  # Default image tag for all Judge platform services (DEPRECATED - use versions.platform)
  # Kept for backward compatibility, will be removed in v2.0.0
  judgeImageTag: "v1.15.0"

  # Version Management (NEW - single source of truth for all service versions)
  versions:
    # Core Judge platform services default version
    platform: "v1.15.0"  # Used for api, archivista, gateway, web if not overridden

    # Individual service version overrides (optional - leave empty to use platform version)
    api: ""         # Judge API service
    archivista: ""  # Attestation storage service
    gateway: ""     # Gateway service
    web: ""         # Web UI service

    # Supporting services (set explicit versions in deployment values files)
    dex: ""                       # OIDC provider
    fulcio: ""                    # Code signing CA
    tsa: ""                       # Timestamp authority
    kratos: ""                    # Identity service
    kratosUI: ""                  # Login UI
    dapr: "1.14.1"                # Dapr runtime
    preflight: "v1.6.0"           # Preflight checks

  # Domain for all external service URLs (VirtualServices, OIDC redirects, etc.)
  # WARNING: Changing this requires updating istio.domain AND verifying all 22 hardcoded URLs below match
  # See DOMAIN.md for complete documentation and update checklist
  domain: testifysec-demo.xyz

  # Istio Configuration (Optional - allows consolidating root istio.* config here)
  # Priority: root istio.* → global.istio.* → defaults
  # Uncomment to use global config instead of root-level istio: block
  # istio:
  #   enabled: false
  #   hosts:
  #     web: "judge"
  #     api: "api"
  #     gateway: "gateway"
  #     login: "login"
  #     kratos: "kratos"
  #     dex: "dex"
  #     fulcio: "fulcio"
  #     tsa: "tsa"

  # Deployment Mode (NEW - replaces dev flag)
  # Options: aws | dev
  # - aws: Production AWS services (S3, RDS, SNS/SQS)
  # - dev: LocalStack + PostgreSQL for self-contained deployments
  mode: aws

  # Development Mode (DEPRECATED - use mode instead)
  # Kept for backward compatibility, will be removed in v2.0.0
  dev: false

  # Dev Mode Database Configuration
  # Used when mode=dev for local PostgreSQL deployment
  # These defaults ensure database endpoint helpers work correctly in all contexts
  devDatabase:
    username: "judge"
    password: "dev-preview-password"

  # AWS Configuration (for EKS deployments with IRSA)
  # Required for proper IAM permissions and resource naming
  # See README.md Troubleshooting section for IRSA setup
  aws:
    # AWS Account and Region
    enabled: false  # Set to true for AWS deployments
    accountId: ""  # Your AWS account ID (required for IRSA)
    region: "us-east-1"  # AWS region

    # Resource Naming Prefix / Deployment Identifier
    # Used to construct AWS resource names AND identify the deployment/cluster
    # This should match your EKS cluster name to prevent resource collisions
    # Examples:
    #   prefix: "demo-judge"  → S3: demo-judge-judge, IAM: demo-judge-judge-api, Cluster: demo-judge
    #   prefix: "prod-judge"  → S3: prod-judge-judge, IAM: prod-judge-judge-api, Cluster: prod-judge
    #   prefix: "staging-judge" → S3: staging-judge-judge, IAM: staging-judge-judge-api, Cluster: staging-judge
    prefix: "demo-judge"

    # IRSA (IAM Roles for Service Accounts)
    irsa:
      enabled: false  # Set to true to enable IRSA annotations on ServiceAccounts
      # IAM Role ARNs will be constructed as: arn:aws:iam::{accountId}:role/{prefix}-{service}
      # Example: arn:aws:iam::123456789012:role/demo-judge-judge-api

    # S3 Storage Configuration
    s3:
      enabled: true
      judge:
        bucket: "{{ .Values.global.aws.prefix }}-judge"  # Judge API artifacts
        region: "{{ .Values.global.aws.region }}"
      archivista:
        bucket: "{{ .Values.global.aws.prefix }}-archivista"  # Archivista attestations
        region: "{{ .Values.global.aws.region }}"

    # SNS/SQS Messaging Configuration (for Dapr pubsub)
    messaging:
      enabled: true
      snsTopic: "{{ .Values.global.aws.prefix }}-archivista-attestations"
      sqsQueue: "{{ .Values.global.aws.prefix }}-archivista-attestations"
      region: "{{ .Values.global.aws.region }}"

  # Container registry configuration
  registry:
    # AWS Marketplace ECR Configuration (Consolidated Format)
    # ============================================================
    # Single source of truth for AWS Marketplace deployments.
    # Automatically configures:
    # - Account: 709825985650 (AWS Marketplace - hardcoded)
    # - Region: us-east-1 (hardcoded)
    # - Seller namespace: testifysec (hardcoded)
    #
    # Example for AWS Marketplace:
    #   marketplace:
    #     enabled: true
    #     versions:
    #       dex: v2.43.1
    #       fulcio: v1.4.5
    #       tsa: v1.6.0
    #
    # Example for non-marketplace:
    #   marketplace:
    #     enabled: false
    #
    marketplace:
      enabled: false
      # versions: {}  # Optional: override specific service versions

    # Standard registry configuration (used when marketplace is disabled)
    provider: gcp-artifact
    url: us-east4-docker.pkg.dev
    repository: judge-395516/judge-image-registry

  imagePullSecrets: []  # ECR auth via node IAM role, not K8s secret
  storageClass: ""

  # Secrets management via External Secrets Operator (ESO) + Vault
  # These variables are used to construct Vault paths for multi-environment deployments
  #
  # VAULT PATH STRUCTURE:
  # Pattern: {env}/kubernetes/{secret-type}/{project}
  # Examples:
  #   - dev/kubernetes/rds/myproject (development database credentials)
  #   - prod/kubernetes/app/myproject (production application secrets)
  #
  # REQUIRED VAULT SECRETS:
  #
  # 1. Database Secrets (path: {env}/kubernetes/rds/{project})
  #    - judge_api_dsn: "postgres://user:pass@host:5432/judge_api?sslmode=require"
  #    - archivista_dsn: "postgres://user:pass@host:5432/archivista?sslmode=require"
  #    - kratos_dsn: "postgres://user:pass@host:5432/kratos?sslmode=require"
  #
  # 2. Application Secrets (path: {env}/kubernetes/app/{project})
  #    - kratos_secrets_cookie: "32-byte-random-string-for-cookie-encryption"
  #    - kratos_secrets_cipher: "32-byte-random-string-for-data-encryption"
  #    - oidc_github_client_id: "your-github-oauth-app-client-id"
  #    - oidc_github_client_secret: "your-github-oauth-app-client-secret"
  #
  # SETUP EXAMPLE (using Vault CLI):
  #   # Database secrets
  #   vault kv put secret/prod/kubernetes/rds/myproject \
  #     judge_api_dsn="postgres://..." \
  #     archivista_dsn="postgres://..." \
  #     kratos_dsn="postgres://..."
  #
  #   # Application secrets
  #   vault kv put secret/prod/kubernetes/app/myproject \
  #     kratos_secrets_cookie="$(openssl rand -base64 32)" \
  #     kratos_secrets_cipher="$(openssl rand -base64 32)" \
  #     oidc_github_client_id="Iv1.abcd1234" \
  #     oidc_github_client_secret="ghp_yoursecrethere"
  #
  secrets:
    provider: "vault"  # Secret backend: vault (External Secrets Operator)
    vault:
      server: "https://vault.example.com"  # Vault server address (override in environment-specific values)
      path: "secret"  # KV v2 mount path
      version: "v2"   # KV version (v1 or v2)
      authMountPath: "kubernetes"  # Kubernetes auth backend mount path
      env: "dev"      # Environment identifier: dev, staging, prod (override per environment)
      project: "myproject"  # Project identifier for path construction (override with your project)

      # NEW: Explicit ServiceAccount names for Vault Kubernetes authentication
      # These MUST match the actual Kubernetes ServiceAccount names created by the Helm chart.
      # Vault roles will use these exact names to authorize pods.
      #
      # Default pattern: {release-name}-{service-name}
      # Example with release "judge-platform":
      #   - judgeApi: "judge-platform-judge-api"
      #   - archivista: "judge-platform-judge-archivista"
      #   - kratos: "judge-platform-judge-kratos"
      #
      # Custom example with release "judge-platform-staging-marketplace":
      #   - judgeApi: "judge-platform-staging-marketplace-judge-api"
      #   - archivista: "judge-platform-staging-marketplace-judge-archivista"
      #   - kratos: "judge-platform-staging-marketplace-judge-kratos"
      serviceAccounts:
        judgeApi: ""      # Leave empty to use computed name from release
        archivista: ""    # Leave empty to use computed name from release
        kratos: ""        # Leave empty to use computed name from release

  # Authentication Configuration (NEW - more accessible OIDC config)
  auth:
    github:
      clientId: ""         # GitHub OAuth App client ID
      clientSecret: ""     # GitHub OAuth App client secret

  # ArgoCD Integration (Optional)
  # When enabled, automatically adds ArgoCD sync options to Job resources
  # Required for proper Job management in ArgoCD (Jobs are immutable)
  argocd:
    enabled: false  # Set to true when deploying via ArgoCD

  # Istio/Networking Configuration (Optional - for configuration pattern)
  # Uncomment to set hostnames globally instead of root-level istio.hosts
  # istio:
  #   enabled: true
  #   tlsSecretName: wildcard-tls
  #   ingressGatewaySelector:
  #     istio: ingress
  #   # Subdomain prefixes (combined with global.domain)
  #   hosts:
  #     gateway: "gateway"   # Gateway service API (gateway.domain)
  #     web: "judge"         # Main Judge web UI (judge.domain)
  #     api: "api"           # Judge API (api.domain)
  #     fulcio: "fulcio"     # Fulcio code signing CA (fulcio.domain)
  #     dex: "dex"           # Dex OIDC provider (dex.domain)
  #     tsa: "tsa"           # Timestamp Authority (tsa.domain)
  #     kratos: "kratos"     # Kratos identity service (kratos.domain)
  #     login: "login"       # Login UI (login.domain)

# Istio service mesh configuration
istio:
  enabled: true
  # MUST match global.domain - validation will fail if they differ
  domain: testifysec-demo.xyz
  tlsSecretName: wildcard-tls
  # Selector for Istio ingress gateway (must match the label on the ingress gateway pod)
  ingressGatewaySelector:
    istio: ingress

  # Public ingress hostnames (subdomains only - will be appended to istio.domain)
  # Override these in your values file to customize public-facing URLs
  # Example: hosts.web: "attestation" becomes attestation.yourdomain.com
  hosts:
    gateway: "gateway"      # Gateway service API (gateway.domain)
    web: "judge"            # Main Judge web UI (judge.domain)
    api: "api"              # Judge API (api.domain)
    fulcio: "fulcio"        # Fulcio code signing CA (fulcio.domain)
    dex: "dex"              # Dex OIDC provider (dex.domain)
    tsa: "tsa"              # Timestamp Authority (tsa.domain)
    kratos: "kratos"        # Kratos identity service (kratos.domain)
    login: "login"          # Login UI (login.domain)
nameOverride: "judge"
gateway:
  enabled: true
  replicas: 1
  nameOverride: "judge-gateway"  # ECR repo name
  image:
    tag: "{{ .Values.global.judgeImageTag }}"
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 512Mi
  archivista:
    url: "http://judge-archivista.judge.svc.cluster.local:8082"
  judgeapi:
    url: "http://judge-api.judge.svc.cluster.local:8080"
  login:
    url: "https://login.testifysec-demo.xyz/login"
kratos:
  nameOverride: "judge-kratos"  # ECR repo name
  fullnameOverride: ""  # Remove fullnameOverride to ensure consistent {release}-{nameOverride} naming
  image:
    tag: v1.0.0-token-update
  enabled: true
  deployment:
    serviceAccount:
      create: true  # Required for SecretStore ServiceAccount ref to work correctly
  courier:
    enabled: false
  kratos:
    config:
      cookies:
        domain: ""  # Empty = use host-only cookies (no cross-subdomain sharing, more secure)
        path: /
        same_site: Lax  # Good balance - "Strict" breaks OAuth, "None" less secure
      selfservice:
        allowed_return_urls:
          - https://login.testifysec-demo.xyz
          - https://kratos.testifysec-demo.xyz
          - https://judge.testifysec-demo.xyz
          - https://localhost
          - https://judge.testifysec-demo.xyz:8077
        methods:
          oidc:
            config:
              providers:
                - id: github
                  provider: github
                  client_id: your-github-client-id
                  client_secret: your-github-client-secret
                  issuer_url: https://github.com
                  mapper_url: file:///etc/config/kratos/github.jsonnet
                  scope:
                    - user
                    - repo
                    - read:org
                    # -and/or
                - id: gitlab
                  provider: gitlab
                  client_id: your-gitlab-client-id
                  client_secret: your-gitlab-client-secret
                  issuer_url: https://gitlab.com
                  mapper_url: file:///etc/config/kratos/gitlab.jsonnet
                  scope:
                    - openid
                    - profile
                    - email
                    - read_user
                    - read_api
                    - read_repository
archivista:
  nameOverride: "judge-archivista"  # ECR repo name
  image:
    tag: "{{ .Values.global.judgeImageTag }}"
  enabled: true
  serviceAccount:
    create: true  # Required for SecretStore ServiceAccount ref to work correctly
  workflows:
    endpoint: http://localstack.localstack.svc.cluster.local:4566
  deployment:
    env:
      - name: ARCHIVISTA_LISTEN_ON
        value: tcp://0.0.0.0:8082
      - name: ARCHIVISTA_STORAGE_BACKEND
        value: '{{ include "judge.s3.archivista.storageBackend" . }}'
      - name: ARCHIVISTA_BLOB_STORE_ENDPOINT
        value: '{{ include "judge.s3.endpoint" . }}'
      - name: ARCHIVISTA_BLOB_STORE_CREDENTIAL_TYPE
        value: '{{ include "judge.s3.credentialType" . }}'
      - name: ARCHIVISTA_BLOB_STORE_USE_TLS
        value: '{{ include "judge.s3.useTLS" . }}'
      - name: ARCHIVISTA_BLOB_STORE_BUCKET_NAME
        value: '{{ include "judge.s3.archivista.bucketName" . }}'
      - name: ARCHIVISTA_BLOB_STORE_REGION
        value: '{{ include "judge.s3.region" . }}'
kratos-selfservice-ui-node:
  nameOverride: "judge-kratos-self-service"  # ECR repo name
  fullnameOverride: ""  # Remove fullnameOverride to ensure consistent {release}-{nameOverride} naming
  image:
    tag: ""  # Tag managed via global.versions.kratosUI - defaults to Chart.AppVersion
  enabled: true
  # Kratos URLs derived from istio.hosts.kratos + global.domain
  # Override only if you need non-standard URLs
  kratosPublicUrl: '{{ include "judge.url.kratos" . }}'
  kratosBrowserUrl: '{{ include "judge.url.kratos" . }}'
judge-api:
  nameOverride: "judge-api"  # ECR repo name
  image:
    tag: "{{ .Values.global.judgeImageTag }}"
  enabled: true
  serviceAccount:
    create: true  # Required for SecretStore ServiceAccount ref to work correctly
  deployment:
    env:
      - name: ARCHIVISTA_PUBSUB_TOPIC
        value: ""
      - name: ARCHIVISTA_PUBSUB_NAME
        value: "judge-judge-api-archivista-subscription"
      - name: BLOB_STORE_USE_TLS
        value: '{{ include "judge.s3.useTLS" . }}'
      - name: BLOB_STORE_BUCKET_NAME
        value: '{{ include "judge.s3.judgeApi.bucketName" . }}'
      - name: BLOB_STORE_ENDPOINT
        value: '{{ include "judge.s3.endpoint" . }}'
      - name: BLOB_STORE_CREDENTIAL_TYPE
        value: '{{ include "judge.s3.credentialType" . }}'
      - name: "__TESTIFY_SKIP_LICENSE_CHECK__"
        value: "true"
      - name: JUDGE_URL
        value: '{{ include "judge.service.judgeApiUrl" . }}'
      - name: ARCHIVISTA_URL
        value: '{{ include "judge.service.archivistaUrl" . }}'
      - name: GATEWAY_URL
        value: '{{ include "judge.service.gatewayUrl" . }}'
      - name: AI_SERVER_URL
        value: '{{ include "judge.service.aiProxyUrl" . }}'
judge-web:
  nameOverride: "judge-web"  # ECR repo name
  image:
    tag: "{{ .Values.global.judgeImageTag }}"
  enabled: true
  nginxReverseProxy:
    enabled: false  # Disabled by default - hardcoded service names cause issues with release prefixes
    clientMaxBodySize: "100M"
dapr:
  enabled: true
  # Dapr uses its own registry field to avoid conflicts with parent chart's global.registry
  registry: ghcr.io/dapr
  # Dapr pubsub configuration for SNS/SQS messaging
  pubsub:
    enabled: true
    region: '{{ include "judge.aws.sns.region" . }}'
    snsTopicName: '{{ include "judge.aws.sns.topicName" . }}'
    sqsQueueName: '{{ include "judge.aws.sqs.queueName" . }}'
  dapr_operator:
    image:
      name: judge-dapr-operator
  dapr_placement:
    image:
      name: judge-dapr-placement
  dapr_sentry:
    image:
      name: judge-dapr-sentry
  dapr_scheduler:
    cluster:
      inMemoryStorage: true
    image:
      name: judge-dapr-scheduler
  dapr_sidecar_injector:
    image:
      name: judge-dapr-daprd
    injectorImage:
      name: judge-dapr-sidecar-injector
dex:
  nameOverride: "judge-dex"  # ECR repo name
  enabled: true
  image:
    tag: ""  # Tag managed via global.versions.dex
  config:
    issuer: https://dex.testifysec-demo.xyz
    storage:
      type: memory
    logger:
      level: debug
      format: json
    oauth2:
      responseTypes: ["code"]
      skipApprovalScreen: true
      alwaysShowLoginScreen: true
    staticClients:
      - id: testifysec
        public: true
        name: "testifysec"
    connectors:
      - type: gitlab
        id: gitlab-fulcio-test
        name: Gitlab
        config:
          clientID: your-gitlab-client-id
          clientSecret: your-gitlab-client-secret
          redirectURI: https://dex.testifysec-demo.xyz/callback
fulcio:
  nameOverride: "judge-fulcio"  # ECR repo name
  enabled: true
  image:
    tag: v1.4.5
  server:
    args:
      disable_ct_log: true
    # volumes and volumeMounts removed - only needed when using ingress with cert-manager
    # For Istio deployments, TLS is handled by the ingress gateway
  config:
    contents:
      {
        "OIDCIssuers":
          {
            "https://dex.testifysec-demo.xyz":
              {
                "IssuerURL": "https://dex.testifysec-demo.xyz",
                "ClientID": "testifysec",
                "Type": "email",
              },
          },
      }
tsa:
  nameOverride: "judge-timestamp-server"  # ECR repo name
  enabled: true
  image:
    tag: ""  # Tag managed via global.versions.tsa - defaults to Chart.AppVersion
  server:
    image:
      registry: ""
      repository: ""
      pullPolicy: IfNotPresent
      version: ""
    args:
      signer: memory

judge-ai-proxy:
  nameOverride: "judge-ai-proxy"  # ECR repo name
  enabled: false  # Disabled - image not yet available in ECR
  image:
    repository: judge-ai-proxy
    tag: latest
  service:
    type: ClusterIP
    port: 8080
  config:
    apiVersion: "2023-06-01"
    apiEndpoint: "https://api.anthropic.com/v1/messages"
    systemPrompt: "You are Claude, an AI assistant by Anthropic. When evaluating policies against attestation data, provide direct responses without conversational preambles. For policy evaluation, always format your response with a clear 'Status: PASS' or 'Status: FAIL' line followed by a 'Reason:' section that explains the evaluation result concisely with supporting evidence from the attestation data."
    defaultModel: "claude-3-5-haiku-latest"

# SSP Generation Configuration
# Note: SSP functionality is implemented via dagger sidecar in judge-api
ssp:
  enabled: true
  # Use Dagger containerized execution for SSP generation
  # When false: falls back to legacy in-process mock generation
  # When true: uses isolated Dagger containers for document generation
  useDagger: true
  # Use AgentFlow (Claude AI) for intelligent SSP content generation
  # Only applies when useDagger is true
  # When false: uses template-based generation with pandoc/latex
  # When true: uses AI-powered generation with pre-compiled binary
  useAgentflow: true
  # AgentFlow model to use for SSP generation
  agentflowModel: "claude-sonnet-4-20250514"
  # Dagger engine socket path
  daggerHost: "unix:///var/run/dagger/engine.sock"

# Pre-flight Validation Configuration
# Runs before deployment to validate all prerequisites
# NOTE: Preflight chart reads configuration directly from .Values.global.*
# No need to pass values through - it has access to parent chart's global values
judge-preflight:
  enabled: true
