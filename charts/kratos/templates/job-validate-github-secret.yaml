{{- if .Values.kratos.oidc.config.providers }}
{{- range .Values.kratos.oidc.config.providers }}
{{- if .secretRef }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "kratos.fullname" $ }}-validate-github-secret
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "kratos.labels" $ | nindent 4 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        {{- include "kratos.selectorLabels" $ | nindent 8 }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "kratos.serviceAccountName" $ }}
      containers:
      - name: validate-secret
        image: bitnami/kubectl:latest
        command:
        - sh
        - -c
        - |
          echo "Checking for GitHub OAuth secret: {{ .secretRef.name }}"

          if ! kubectl get secret {{ .secretRef.name }} -n {{ $.Release.Namespace }} >/dev/null 2>&1; then
            echo ""
            echo "=========================================="
            echo "ERROR: GitHub OAuth Secret Not Found"
            echo "=========================================="
            echo ""
            echo "The secret '{{ .secretRef.name }}' does not exist in namespace '{{ $.Release.Namespace }}'."
            echo ""
            echo "To create this secret, run:"
            echo ""
            echo "  kubectl create secret generic {{ .secretRef.name }} \\"
            echo "    --namespace {{ $.Release.Namespace }} \\"
            echo "    --from-literal=clientId=<your-github-client-id> \\"
            echo "    --from-literal=clientSecret=<your-github-client-secret>"
            echo ""
            echo "Obtain your GitHub OAuth credentials from:"
            echo "  https://github.com/settings/developers"
            echo ""
            echo "=========================================="
            exit 1
          fi

          # Validate secret has required keys
          if ! kubectl get secret {{ .secretRef.name }} -n {{ $.Release.Namespace }} -o jsonpath='{.data.clientId}' >/dev/null 2>&1; then
            echo ""
            echo "=========================================="
            echo "ERROR: Missing 'clientId' in Secret"
            echo "=========================================="
            echo ""
            echo "The secret '{{ .secretRef.name }}' exists but is missing the required 'clientId' key."
            echo ""
            echo "Expected keys: clientId, clientSecret"
            echo ""
            echo "=========================================="
            exit 1
          fi

          if ! kubectl get secret {{ .secretRef.name }} -n {{ $.Release.Namespace }} -o jsonpath='{.data.clientSecret}' >/dev/null 2>&1; then
            echo ""
            echo "=========================================="
            echo "ERROR: Missing 'clientSecret' in Secret"
            echo "=========================================="
            echo ""
            echo "The secret '{{ .secretRef.name }}' exists but is missing the required 'clientSecret' key."
            echo ""
            echo "Expected keys: clientId, clientSecret"
            echo ""
            echo "=========================================="
            exit 1
          fi

          echo "âœ“ Secret '{{ .secretRef.name }}' validated successfully"
---
{{- end }}
{{- end }}
{{- end }}
