{{- if .Values.kratos.enabled -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kratos-config
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: judge-kratos
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  # Complete kratos config generated by judge.kratos.config.complete helper
  "kratos.yaml": |
    {{- include "judge.kratos.config.complete" . | nindent 4 }}

  # GitHub OIDC mapper
  "github.jsonnet": |
    local claims = {
    email_verified: false
    } + std.extVar('claims');

    {
      identity: {
        traits: {
                  // Allowing unverified email addresses enables account
                  // enumeration attacks, especially if the value is used for
                  // e.g. verification or as a password login identifier.
                  //
                  // Therefore we only return the email if it (a) exists and (b) is marked verified
                  // by GitHub.
          [if "email" in claims && claims.email_verified then "email" else null]: claims.email,
          [if "name" in claims then "name" else null]: claims.name,
        },
        metadata_public: {
          assigned_tenants: []
        }
      },
    }

  # GitLab OIDC mapper
  "gitlab.jsonnet": |
    local claims = {
    email_verified: false
    } + std.extVar('claims');

    {
      identity: {
        traits: {
                  // Allowing unverified email addresses enables account
                  // enumeration attacks, especially if the value is used for
                  // e.g. verification or as a password login identifier.
                  //
                  // Therefore we only return the email if it (a) exists and (b) is marked verified
                  // by GitLab.
          [if "email" in claims && claims.email_verified then "email" else null]: claims.email,
          [if "name" in claims then "name" else null]: claims.name,
        },
        metadata_public: {
          assigned_tenants: []
        }
      },
    }

  # Metadata webhook for judge-api integration
  "metadata_webhook.jsonnet": |
    function(ctx) {
      identityId: ctx.identity.id,
      traits: ctx.identity.traits,
    }
{{- end -}}
