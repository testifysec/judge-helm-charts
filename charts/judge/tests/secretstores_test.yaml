suite: Vault SecretStore Configuration
templates:
  - templates/secretstores.yaml
tests:
  # Test 1: SecretStores created when provider=vault and dev=false
  - it: should create all three SecretStores when provider=vault
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.vault-system.svc.cluster.local:8200
      global.dev: false
    asserts:
      - hasDocuments:
          count: 3
      - isKind:
          of: SecretStore
        documentIndex: 0
      - isKind:
          of: SecretStore
        documentIndex: 1
      - isKind:
          of: SecretStore
        documentIndex: 2

  # Test 2: Correct SecretStore names
  - it: should create SecretStores with correct names
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.vault-system.svc.cluster.local:8200
      global.dev: false
    asserts:
      - equal:
          path: metadata.name
          value: vault-kratos
        documentIndex: 0
      - equal:
          path: metadata.name
          value: vault-judge-api
        documentIndex: 1
      - equal:
          path: metadata.name
          value: vault-archivista
        documentIndex: 2

  # Test 3: ServiceAccount references
  - it: should reference correct ServiceAccount for kratos
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.vault-system.svc.cluster.local:8200
      global.dev: false
      kratos.deployment.serviceAccount.create: true
    documentIndex: 0
    asserts:
      - equal:
          path: spec.provider.vault.auth.kubernetes.serviceAccountRef.name
          value: RELEASE-NAME-judge-kratos

  - it: should reference correct ServiceAccount for judge-api
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.vault-system.svc.cluster.local:8200
      global.dev: false
      judge-api.serviceAccount.create: true
    documentIndex: 1
    asserts:
      - equal:
          path: spec.provider.vault.auth.kubernetes.serviceAccountRef.name
          value: RELEASE-NAME-judge-api

  - it: should reference correct ServiceAccount for archivista
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.vault-system.svc.cluster.local:8200
      global.dev: false
      archivista.serviceAccount.create: true
    documentIndex: 2
    asserts:
      - equal:
          path: spec.provider.vault.auth.kubernetes.serviceAccountRef.name
          value: RELEASE-NAME-judge-archivista

  # Test 4: Vault server configuration
  - it: should configure correct Vault server URL
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.example.com:8200
      global.dev: false
    documentIndex: 0
    asserts:
      - equal:
          path: spec.provider.vault.server
          value: http://vault.example.com:8200

  # Test 5: Vault roles
  - it: should configure correct Vault roles
    set:
      global.secrets.provider: vault
      global.dev: false
    asserts:
      - equal:
          path: spec.provider.vault.auth.kubernetes.role
          value: kratos
        documentIndex: 0
      - equal:
          path: spec.provider.vault.auth.kubernetes.role
          value: judge-api
        documentIndex: 1
      - equal:
          path: spec.provider.vault.auth.kubernetes.role
          value: archivista
        documentIndex: 2

  # Test 6: NOT created in dev mode
  - it: should NOT create SecretStores when mode=dev
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.vault-system.svc.cluster.local:8200
      global.mode: dev
      global.devDatabase.username: postgres
      global.devDatabase.password: postgres
    asserts:
      - hasDocuments:
          count: 0

  # Test 7: NOT created when provider != vault
  - it: should NOT create SecretStores when provider is not vault
    set:
      global.secrets.provider: kubernetes
      global.dev: false
    asserts:
      - hasDocuments:
          count: 0

  # Test 8: Custom Vault path
  - it: should use custom Vault path when specified
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.vault-system.svc.cluster.local:8200
      global.secrets.vault.path: custom-secret
      global.dev: false
    documentIndex: 0
    asserts:
      - equal:
          path: spec.provider.vault.path
          value: custom-secret

  # Test 9: Custom Vault auth mount path
  - it: should use custom Vault auth mount path when specified
    set:
      global.secrets.provider: vault
      global.secrets.vault.server: http://vault.vault-system.svc.cluster.local:8200
      global.secrets.vault.authMountPath: custom-k8s
      global.dev: false
    documentIndex: 0
    asserts:
      - equal:
          path: spec.provider.vault.auth.kubernetes.mountPath
          value: custom-k8s

  # Test 10: ArgoCD sync wave annotation
  - it: should have ArgoCD sync wave annotation
    set:
      global.secrets.provider: vault
      global.dev: false
    documentIndex: 0
    asserts:
      - equal:
          path: metadata.annotations["argocd.argoproj.io/sync-wave"]
          value: "1"

  # Test 11: Custom ServiceAccount names
  - it: should use custom ServiceAccount name for kratos
    set:
      global.secrets.provider: vault
      global.dev: false
      kratos.deployment.serviceAccount.name: custom-kratos-sa
      kratos.deployment.serviceAccount.create: true
    documentIndex: 0
    asserts:
      - equal:
          path: spec.provider.vault.auth.kubernetes.serviceAccountRef.name
          value: custom-kratos-sa

  - it: should use custom ServiceAccount name for judge-api
    set:
      global.secrets.provider: vault
      global.dev: false
      judge-api.serviceAccount.name: custom-judge-api-sa
      judge-api.serviceAccount.create: true
    documentIndex: 1
    asserts:
      - equal:
          path: spec.provider.vault.auth.kubernetes.serviceAccountRef.name
          value: custom-judge-api-sa
